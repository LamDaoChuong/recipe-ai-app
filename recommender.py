import os
from sqlalchemy import create_engine, text
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
DB_URL = os.getenv("DATABASE_URL")

# Load model embedding
model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")

def get_recommendations(ingredient_query, top_k=5):
    engine = create_engine(DB_URL)

    # T·∫°o embedding cho nguy√™n li·ªáu ng∆∞·ªùi d√πng nh·∫≠p
    query_embedding = model.encode(ingredient_query).tolist()

    # Truy v·∫•n nearest neighbor trong Postgres v·ªõi pgvector
    with engine.connect() as conn:
        result = conn.execute(
            text("""
                SELECT id, ten_mon, url, nguyen_lieu,
                       1 - (embedding <=> (:query_embedding)::vector) AS similarity
                FROM recipes
                ORDER BY embedding <=> (:query_embedding)::vector
                LIMIT :top_k
            """),
            {"query_embedding": query_embedding, "top_k": top_k}
        )
        return result.fetchall()

if __name__ == "__main__":
    print("üëâ Nh·∫≠p nguy√™n li·ªáu b·∫°n c√≥ s·∫µn (v√≠ d·ª•: 'm√¨, kim chi, ph√¥ mai'):")
    user_input = input("Nguy√™n li·ªáu: ")

    results = get_recommendations(user_input, top_k=5)

    print("\nüéØ G·ª£i √Ω m√≥n ƒÉn:")
    for row in results:
        print(f"- {row.ten_mon} ({row.similarity:.2f})")
        print(f"  Nguy√™n li·ªáu: {row.nguyen_lieu}")
        print(f"  Xem chi ti·∫øt: {row.url}\n")