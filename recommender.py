import os
from sqlalchemy import create_engine, text
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng (DATABASE_URL t·ª´ .env)
load_dotenv()
DB_URL = os.getenv("DATABASE_URL")

# Kh·ªüi t·∫°o k·∫øt n·ªëi DB
engine = create_engine(DB_URL)

# Kh·ªüi t·∫°o model embedding
model = SentenceTransformer("all-MiniLM-L6-v2")

def recommend(query: str, top_k: int = 5):
    """
    G·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n nguy√™n li·ªáu ng∆∞·ªùi d√πng nh·∫≠p v√†o.
    Tr·∫£ v·ªÅ danh s√°ch m√≥n ƒÉn k√®m ƒë·ªô t∆∞∆°ng ƒë·ªìng.
    """
    # Sinh embedding cho input
    query_emb = model.encode([query])[0].tolist()

    # Truy v·∫•n PostgreSQL v·ªõi pgvector
    with engine.connect() as conn:
        results = conn.execute(
            text("""
                SELECT
                    id,
                    ten_mon,
                    anh,
                    video,
                    url,
                    nguyen_lieu,
                    cach_lam,
                    1 - (embedding <=> :query_emb) AS similarity
                FROM recipes
                ORDER BY embedding <=> :query_emb
                LIMIT :top_k;
            """),
            {"query_emb": query_emb, "top_k": top_k}
        ).fetchall()

    return results

if __name__ == "__main__":
    test_query = "th·ªãt g√†, h√†nh, t·ªèi"
    rs = recommend(test_query, top_k=3)
    for r in rs:
        print(f"üç≤ {r.ten_mon} ({r.similarity:.2f})")
        print(f"Nguy√™n li·ªáu: {r.nguyen_lieu}")
        print("---")